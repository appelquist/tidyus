import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { ChoreComplete, type Chore } from "@prisma/client";
import Head from "next/head";

import { RouterOutputs, api } from "~/utils/api";

export default function Home() {
  const user = useUser();
  const { data, isLoading } = api.chores.getChoresWithLatestComplete.useQuery();
  if (isLoading) return <div>Loading...</div>;
  if (!data) return <div>Something went wrong</div>;
  return (
    <>
      <Head>
        <title>Tidyus</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x md:max-w-7xl">
          <div className="flex justify-end border-b border-slate-500 p-2">
            {!user.isSignedIn && <SignInButton />}
            {!!user.isSignedIn && <SignOutButton />}
          </div>
          <CreateChoreWizard />
          <div className="grid grid-flow-row grid-cols-1 gap-4 p-2 sm:grid-cols-2 md:grid-cols-4">
            {data.map((chore) => (
              <ChoreCard key={chore.chore.id} {...chore} />
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

type ChoreWithUser =
  RouterOutputs["chores"]["getChoresWithLatestComplete"][number];

const ChoreCard = (props: ChoreWithUser) => {
  const {
    title,
    interval,
    createdAt,
    isCompletedWithinInterval,
    choreCompletes,
  } = props.chore;
  const { username, profileImageUrl } = props.createdBy;
  return (
    <div
      className={`rounded-md border ${
        isCompletedWithinInterval ? "bg-lime-400" : "bg-red-400"
      } p-2`}
    >
      <h1 className="">{title}</h1>
      <h3>Should be done every: {interval} days</h3>
      {/* <h3>
        Created: {createdAt.toDateString()} by <span>{username}</span>
        <span>
          <img
            src={profileImageUrl}
            alt="Profile image"
            className="h-6 w-6 rounded-full"
          ></img>
        </span>
      </h3> */}
      <CompleteStatusesView
        statuses={completeStatuses(choreCompletes, interval * 86400000, [], 5)}
      />
    </div>
  );
};

const CreateChoreWizard = () => {
  const { user } = useUser();
  if (!user) return null;
  return (
    <div className="flex w-full gap-3 border p-2">
      <img
        src={user.imageUrl}
        alt="Profile image"
        className="h-12 w-12 rounded-full"
      />
      <input placeholder="Title!" className="bg-transparent outline-none" />
      <input placeholder="Interval" className="bg-transparent outline-none" />
    </div>
  );
};

const CompleteStatusesView = ({ statuses }: { statuses: CompleteStatus[] }) => {
  const completeStatuses = statuses.map((status, i) => {
    let color;
    if (status === CompleteStatus.CompletedInTime) {
      color = "bg-lime-200";
    } else if (status === CompleteStatus.NotCompletedInTime) {
      color = "bg-red-200";
    } else {
      color = "bg-slate-700";
    }

    return <div key={i} className={`h-6 w-6 rounded-full ${color}`}></div>;
  });
  return <div className="flex w-2/3 justify-evenly">{completeStatuses}</div>;
};

const completeStatuses = (
  choreCompletes: ChoreComplete[],
  deadline: number,
  result: CompleteStatus[],
  numberOfStatuses: number,
): CompleteStatus[] => {
  if (numberOfStatuses === 0) {
    return result;
  }
  if (!choreCompletes[0] || !choreCompletes) {
    const [first, ...rest] = choreCompletes;
    const nextDeadline = deadline * 2;
    const nextResult = [...result, CompleteStatus.NoEntryForDeadLine];
    return completeStatuses(
      rest,
      nextDeadline,
      nextResult,
      numberOfStatuses - 1,
    ).reverse();
  }
  const [first, ...rest] = choreCompletes;
  const choreCompletedAt = first.completedAt.getTime();

  if (choreCompletedAt > deadline) {
    const nextDeadline = choreCompletedAt - deadline * 86400000;
    const nextResult = [...result, CompleteStatus.CompletedInTime];
    return completeStatuses(
      rest,
      nextDeadline,
      nextResult,
      numberOfStatuses - 1,
    ).reverse();
  }
  const nextDeadline = deadline * 2;
  const nextResult = [...result, CompleteStatus.NotCompletedInTime];
  return completeStatuses(
    rest,
    nextDeadline,
    nextResult,
    numberOfStatuses - 1,
  ).reverse();
};

enum CompleteStatus {
  CompletedInTime = "completedInTime",
  NotCompletedInTime = "notCompletedInTime",
  NoEntryForDeadLine = "noEntryForDeadline",
}
