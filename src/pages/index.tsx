import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { type ChoreComplete } from "@prisma/client";
import Head from "next/head";

import { type RouterOutputs, api } from "~/utils/api";

export default function Home() {
  const user = useUser();
  const { data, isLoading } = api.chores.getChoresWithLatestComplete.useQuery();
  if (isLoading) return <div>Loading...</div>;
  if (!data) return <div>Something went wrong</div>;
  return (
    <>
      <Head>
        <title>Tidyus</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x md:max-w-7xl">
          <div className="flex justify-end border-b border-slate-500 p-2">
            {!user.isSignedIn && <SignInButton />}
            {!!user.isSignedIn && <SignOutButton />}
          </div>
          <CreateChoreWizard />
          <div className="grid grid-flow-row grid-cols-1 gap-4 p-2 md:grid-cols-2 lg:grid-cols-4">
            {data.map((chore) => (
              <ChoreCard key={chore.chore.id} {...chore} />
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

type ChoreWithUser =
  RouterOutputs["chores"]["getChoresWithLatestComplete"][number];

const ChoreCard = (props: ChoreWithUser) => {
  const { title, interval, isCompletedWithinInterval, choreCompletes } =
    props.chore;
  const statuses = completeStatuses(interval, choreCompletes.slice(0, 5));
  return (
    <div
      className={`flex h-36 max-w-sm flex-col justify-between rounded-md border p-2 shadow-md ${
        isCompletedWithinInterval
          ? "border-lime-400 bg-lime-50"
          : "border-red-300 bg-red-50"
      }`}
    >
      <div>
        <h1 className="text-lg font-semibold">{title}</h1>
        <h3>
          Should be done every:{" "}
          <span className="font-semibold">{interval} days</span>
        </h3>
      </div>
      <CompleteStatusesView statuses={statuses} />
    </div>
  );
};

const CreateChoreWizard = () => {
  const { user } = useUser();
  if (!user) return null;
  return (
    <div className="flex w-full gap-3 border p-2">
      <img
        src={user.imageUrl}
        alt="Profile image"
        className="h-12 w-12 rounded-full"
      />
      <input placeholder="Title!" className="bg-transparent outline-none" />
      <input placeholder="Interval" className="bg-transparent outline-none" />
    </div>
  );
};

const CompleteStatusesView = ({ statuses }: { statuses: CompleteStatus[] }) => {
  const completeStatuses = statuses.map((status, i) => {
    return (
      <div
        key={i}
        className={`mr-2 h-6 w-6 rounded-full border ${
          status === CompleteStatus.CompletedInTime
            ? "border-lime-400 bg-lime-200"
            : "border-red-300 bg-red-200"
        }`}
      ></div>
    );
  });
  return (
    <div className="flex w-2/3 min-w-max justify-start">{completeStatuses}</div>
  );
};

const completeStatuses = (
  interval: number,
  choreCompletes: ChoreComplete[],
) => {
  return choreCompletes
    .map((choreComplete, i, completes) => {
      const previousComplete = completes[i + 1];
      if (!previousComplete) {
        const intervalStart = Date.now() - interval * 86400000;
        if (choreComplete.completedAt.getTime() > intervalStart) {
          return CompleteStatus.CompletedInTime;
        }
        return CompleteStatus.NotCompletedInTime;
      }
      const intervalStart =
        previousComplete.completedAt.getTime() - interval * 86400000;
      if (choreComplete.completedAt.getTime() > intervalStart) {
        return CompleteStatus.CompletedInTime;
      }
      return CompleteStatus.NotCompletedInTime;
    })
    .reverse();
};

enum CompleteStatus {
  CompletedInTime = "completedInTime",
  NotCompletedInTime = "notCompletedInTime",
}
